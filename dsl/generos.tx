/*
  Generos DSL grammar.
*/

GenerosModel:
	imports*=Import
	commands *= Command
	/*packages*=Package
	nodes*=Node
	parameters*=Parameter
	publishers*=Publisher
	
	clients*=Client
	servers*=Server
	dependencies*=Dependency
	messages*=Message
	subscribers*=Subscriber
*/
;

Command:
	Package | Node | Parameter | Publisher | Subscriber | Client | Server | ActionServer | ActionClient | Dependency | Message | ServiceMessage | ActionInterface | QoSProfile | Host | Deployment | NetworkInterface | LocalNetwork
;

Import: 'import' importURI=FQNI ('as' name=ID)?;


FQN: ID+['.'];
FQNI: ID+['.']('.*')?;

Host:
	'host' name=ID '{'
		'architecture' '=' architecture=STRING
		'os' '=' OS=STRING
		'hardDisk' '=' hardDisk = FLOAT
		'memory' '=' memory = FLOAT
		'rosVersion' '=' rosVersion = STRING
		('hasNetworkInterfaces' '=' hasNetworkInterfaces*=[NetworkInterface|FQN][','])?
    '}'
;

NetworkInterface:
	'networkinterface' name=ID '{'
		'gateway' '=' gateway=STRING
		'subnetMask' '=' subnetMask=STRING
		'ip' '=' ip = STRING
    '}'
;

LocalNetwork:
	'localnetwork' name=ID '{'
		'gateway' '=' gateway=STRING
		'subnetMask' '=' subnetMask=STRING
		'ip' '=' ip = STRING
    '}'
;

Deployment:
	'deployment' name=ID '{'
		('arguments' '=' arguments*=STRING[','])?
		('nodes' '=' nodes*=[Node|FQN][','])?
		'host' '=' host=[Host|FQN]
    '}'
;

Package:
	CustomPackage | RosPackage
;

CustomPackage:
    'package' name=ID '{'
		'description' '=' description=STRING
		'path' '=' packagePath=STRING
		'license' '=' license = STRING
		'maintainer' '=' maintainer = STRING
		'email' '=' email = STRING
		'version' '=' version=STRING
		('builtin' '=' builtin=BOOL)?
		('hasNodes' '=' hasNodes *= [Node|FQN][','])?
		('hasDependencies' '=' hasDependencies *= [Dependency|FQN][','])?
    '}'
;

RosPackage:
    'ros' 'package' name=ID '{'
		('description' '=' description=STRING)?
		'path' '=' packagePath=STRING
		'license' '=' license = STRING
		'maintainer' '=' maintainer = STRING
		'email' '=' email = STRING
		'version' '=' version=STRING
		('builtin' '=' builtin=BOOL)?
		('hasNodes' '=' hasNodes *= [Node|FQN][','])?
		('hasDependencies' '=' hasDependencies *= [Dependency|FQN][','])?
    '}'
;

Node:
    'node' name=ID '{'
		('namespace' '=' namespace=STRING)?
		('hasParameters' '=' hasParameters *= [Parameter|FQN][','])?
		('hasPublishers' '=' hasPublishers *= [Publisher|FQN][','])?
		('hasSubscribers' '=' hasSubscribers *= [Subscriber|FQN][','])?
		('hasServers' '=' hasServers *= [Server|FQN][','])?
		('hasClients' '=' hasClients *= [Client|FQN][','])?
		('hasActionServers' '=' hasActionServers *= [ActionServer|FQN][','])?
		('hasActionClients' '=' hasActionClients *= [ActionClient|FQN][','])?
    '}'
;

Parameter:
    'parameter' name=ID '{'
		'type' '=' type=STRING
		'value' '=' value=STRING
		('description' '=' description=STRING)?
    '}'
;

Publisher:
    'publisher' name=ID '{'
		'topicPath' '=' topicPath=STRING
		'publishRate' '=' publishRate=FLOAT
		'message' '=' message=[Message|FQN]
		('qos' '=' qos=[QoSProfile|FQN])?
    '}'
;

Subscriber:
    'subscriber' name=ID '{'
		'topicPath' '=' topicPath=STRING
		'message' '=' message=[Message|FQN]
		('qos' '=' qos=[QoSProfile|FQN])?
    '}'
;

Server:
    'server' name=ID '{'
		'servicePath' '=' servicePath=STRING
		'serviceName' '=' serviceName=STRING
		'service' '=' service=[ServiceMessage|FQN]
		('qos' '=' qos=[QoSProfile|FQN])?
    '}'
;

Client:
    'client' name=ID '{'
		'servicePath' '=' servicePath=STRING
		'serviceName' '=' serviceName=STRING
		'service' '=' service=[ServiceMessage|FQN]
		('qos' '=' qos=[QoSProfile|FQN])?
    '}'
;

ActionServer:
    'actionServer' name=ID '{'
		'action' '=' actioninterface=[ActionInterface|FQN]
    '}'
;

ActionClient:
    'actionClient' name=ID '{'
		'action' '=' actioninterface=[ActionInterface|FQN]
    '}'
;

Dependency:
    'dependency' name=ID '{'
		'package' '=' package=[Package|FQN]
    '}'
;

Message:
   CustomMessage | RosMessage
;

RosMessage:
    'message' name=ID 'package' '=' package=STRING
;

CustomMessage:
    'message' name=ID '{'
		('description' '=' description=STRING)?
		hasObjects *= Object
    '}'
;
ServiceMessage:
   CustomServiceMessage | RosServiceMessage
;

RosServiceMessage:
    'service' name=ID 'package' '=' package=STRING
;

CustomServiceMessage:
    'service' name=ID '{'
		'request' ':' request = Request
		'response' ':' response = Response
		
		('description' '=' description=STRING)?
		
    '}'
;

Request: 
	hasObjects *= Object
;
Response: 
	hasObjects *= Object
;

ActionInterface:
   CustomActionInterface
;

CustomActionInterface:
    'action' name=ID '{'
		'goal' ':' goal = Goal
		'result' ':' result = Result
		'feedback' ':' feedback = Feedback
		
		('description' '=' description=STRING)?
		
    '}'
;

Goal: 
	hasObjects *= Object
;
Result: 
	hasObjects *= Object
;
Feedback: 
	hasObjects *= Object
;

Object:
	(Primitive | ROSData)
;


Primitive:
	'datatype' type=ID
		name=ID
		(',' 'description''=' description=STRING)? 
		(',' 'constant''=' constant=BOOL)? 
		(',' 'default''=' default=STRING)?
;

ROSData: 
	'rostype' type=ID
	name=ID ',' 
	package=ID 
	(',' 'description''=' description=STRING)? 
	(',' 'constant''=' constant=BOOL)? 
	(',' 'default''=' default=STRING)?
;

QoSProfile:
	CustomQosProfile | RosQosProfile
;

CustomQosProfile: 
	'qosprofile' name=ID '{'
		('history' '=' history=STRING)?
		('depth' '=' depth=INT)?
		('reliability' '=' reliability=STRING)?
		('durability' '=' durability=STRING)?
		('livelines' '=' livelines=STRING)?
		('deadlineSec' '=' deadlineSec=INT)?
		('deadlineNSec' '=' deadlineNSec=INT)?
		('lifespanSec' '=' lifespanSec=INT)?
		('lifespanNSec' '=' lifespanNSec=INT)?
		('liveliness_lease_durationSec' '=' liveliness_lease_durationSec=INT)?
		('liveliness_lease_durationNSec' '=' liveliness_lease_durationNSec=INT)?
		('avoid_ros_namespace_conventions' '=' avoid_ros_namespace_conventions=BOOL)?
	'}'
;

RosQosProfile:
	'presetqos' name=ID
;

// Special rule for comments. Comments start with //
Comment:
    /\/\/.*$/
;
