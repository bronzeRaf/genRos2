
import model3.grs

subscriber sub1{
	topicPath = "topic/path1"
	message = M1
}

publisher pub1{
	topicPath = "topic/path1"
	publishRate = 10
	message = M1
}

node node1 {
	hasParameters = p1
	hasSubscribers = sub1
	hasServers = s1, s2
	hasActionServers = as1
	hasActionClients = ac2
}

node node2 {
	namespace = "name/space2"
	hasPublishers = pub1
	hasClients = c1
	hasActionServers = as2
	hasActionClients = ac1
}

node node3 {
	namespace = "name/space3"
	hasSubscribers = sub1
	hasClients = c2
}

parameter p1{
	type = "int32"
	value = "32"
}

server s1{
	servicePath = "path"
	serviceName = "service1"
	service = Addtwo
	qos = q1
}

server s2{
	servicePath = "path2"
	serviceName = "service2"
	service = SetBool
	qos = q1
}

client c1{
	servicePath = "path"
	serviceName = "service1"
	service = Addtwo
	qos = q1
}

client c2{
	servicePath = "path2"
	serviceName = "service2"
	service = Addtwo
	qos = q1
}



service Addtwo{
	request:
		datatype int32 x, description = "first number", default = "0"
		datatype int32 y, description = "second number", default = "0"
	response:	
		datatype bool b, description = "descripssstion333..."
		rostype Header h, std_msgs
		datatype int64 z, description = "The sum of x+y"
}

action Increase{
	goal:
		datatype int32 start, description = "start number", default = "0"
		datatype int32 stop, description = "stop number", default = "0"
	result:	
		datatype bool resus, description = "descripssstion333..."
	feedback:
		rostype Header h, std_msgs
		datatype int64 z, description = "The counter"
}

action Dec{
	goal:
		datatype int64 x1, description = "number 1", default = "0"
		datatype float64 x2, description = "number 2", default = "0"
	result:	
		datatype float64 y, description = "the result"
	feedback:
		rostype Header h, std_msgs
		datatype float64 yt, description = "The current result"
}

actionServer as1{
	action = Increase
}

actionClient ac1{
	action = Increase
}

actionServer as2{
	action = Dec
}

actionClient ac2{
	action = Dec
}


qosprofile q1{
	history = "KEEP_ALL"
	reliability = "RELIABLE"
}

presetqos SENSOR_DATA
presetqos SENSOR_DATA
message Header package = "std_msgs"
service SetBool package = "std_srvs"

subscriber laser{
	topicPath = "topic/path1"
	message = M1
}

publisher map{
	topicPath = "topic/map"
	publishRate = 10
	message = M1
}

node slamer {
	hasPublishers = map
	hasSubscribers = laser
}

